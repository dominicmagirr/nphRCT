trt_events <- trt[d_j_events]
t_j_events<-unique(times[d_j_events])
n_event_g <- matrix(table(trt[d_j_events > 0], times[d_j_events]),ncol=2,byrow = TRUE)
n_event_g
groups
d_j_events
trt_events
times[d_j_events]
t_j_events<-unique(times[d_j_events])
t_j_events
d_j_events > 0
trt[d_j_events > 0]
times[d_j_events]
times[d_j_events]
table(trt[d_j_events > 0], times[d_j_events]
)
n_event_g <- matrix(table(trt[d_j_events > 0], times[d_j_events]),ncol=2,byrow = TRUE)
n_event_g
rep(t_j_events,each = sum(trt == groups[i]))
matrix(rep(t_j_events,each = sum(trt == groups[i])),ncol=length(t_j_events))
for (i in 1:2){
n_risk_g[, i] <-
colSums(matrix(rep(t_j_events,each = sum(trt == groups[i])),ncol=length(t_j_events)) <= times[trt == groups[i]])
}
d_j_events<-(d_j > 0)
trt_events <- trt[d_j_events]
t_j_events<-unique(times[d_j_events])
n_event_g <- matrix(table(trt[d_j_events > 0], times[d_j_events]),ncol=2,byrow = TRUE)
#number at risk
n_risk_g <- matrix(0, length(t_j_events), 2)
for (i in 1:2){
n_risk_g[, i] <-
colSums(matrix(rep(t_j_events,each = sum(trt == groups[i])),ncol=length(t_j_events)) <= times[trt == groups[i]])
}
n_risk_g
formula
data
check_formula(formula=formula,data=data)
formula_vars <- all.vars(formula)
time_col <- formula_vars[1]
status_col <- formula_vars[2]
Terms <- terms(formula,"strata")
strata_index <- survival::untangle.specials(Terms,"strata")$terms
time_col
status_col
Terms
strata_index
#Find weights
wlr <- match.arg(wlr, c("lr", "fh", "mw"))
Surv <- survival::Surv
formula_km<-as.formula(paste0("Surv(",time_col,",",status_col,")~1"))
km_fit <- survival::survfit(formula_km,
data = data,
timefix = FALSE)
formula_km
km_fit
km_fit$time
km_fit$n.risk
km_fit$n.event
km_fit$n.censor
-km_fit$n.event > 0
km_fit$n.event > 0
events<-km_fit$n.event > 0
t_j <- km_fit$time[events]
S_hat <- km_fit$surv[events]
n_risk <- km_fit$n.risk[events]
n_event <- km_fit$n.event[events]
n_censor <- km_fit$n.censor[events]
S_hat_minus <- c(1, S_hat[1:(length(S_hat) - 1)])
S_hat_minus
wlr == "mw"
check_mw(rho=rho,gamma=gamma,t_star=t_star,s_star=s_star)
!is.null(t_star)
any(t_j < t_star
)
w <- pmin(1 / S_hat_minus,
1 / S_hat[max(which(t_j < t_star))])
w
###################################
scores_out<-find_scores(data=sim_data,
formula=Surv(event_time,event_status)~group,
wlr="mw",
t_star = 3
)
plot(scores_out)
scores_out
###################################
df <- scores_out$df
replicate(df[29,], 2)
replicate(2, df[29,])
do.call(rbind, replicate(2, df[29,]))
purrr::map(1:2, df[29,])
purrr::map(rep(29, 2), function(x) df[x,])
purrr::map_df(rep(29, 2), function(x) df[x,])
for (i in seq_along(df$t_j)) df_null <- rbind(df_null, purrr::map_df(rep(i, df[i,"n_event"] + df[i, "n_censor"]), function(x) df[x,]))
df_full <- NULL
for (i in seq_along(df$t_j)) df_null <- rbind(df_null, purrr::map_df(rep(i, df[i,"n_event"] + df[i, "n_censor"]), function(x) df[x,]))
df_null <- NULL
for (i in seq_along(df$t_j)) df_null <- rbind(df_null, purrr::map_df(rep(i, df[i,"n_event"] + df[i, "n_censor"]), function(x) df[x,]))
df_null
formula
df<-find_weights(data=data,
formula=formula,
wlr=wlr,
t_star = t_star,
s_star = s_star,
rho = rho,
gamma = gamma,
include_cens=TRUE)
df
df$score_cens<-with(df,-cumsum(w*(n_event/n_risk)))
df$score_event<-with(df,score_cens+w)
###########################################
## replicate rows with ties (DM)
df_full <- NULL
for (i in seq_along(df$t_j)) df_full <- rbind(df_full, purrr::map_df(rep(i, df[i,"n_event"] + df[i, "n_censor"]), function(x) df[x,]))
df <- df_full
df
df$rank<-paste0("(",nrow(df):1,")")
df
df<-find_weights(data=data,
formula=formula,
wlr=wlr,
t_star = t_star,
s_star = s_star,
rho = rho,
gamma = gamma,
include_cens=TRUE)
df
#####################################
## include treatment group (DM)
df_at_risk <- find_at_risk(formula=formula,
data=data,
include_cens=TRUE)
df_at_risk
df
df_at_risk
df$n_event_control <- df_at_risk$n_event_control
df$n_event_experimental <- df_at_risk$n_event_experimental
df
df_at_risk
df_at_risk$n_risk_control
rev(df_at_risk$n_risk_control)
rev(c(0,df_at_risk$n_risk_control[-length(df_at_risk$n_risk_control)])
########################################
###########################################
## replicate rows with ties (DM)
df_full <- NULL
for (i in seq_along(df$t_j)) df_full <- rbind(df_full, purrr::map_df(rep(i, df[i,"n_event"] + df[i, "n_censor"]), function(x) df[x,]))
df <- df_full
###########################################
df$rank<-paste0("(",nrow(df):1,")")
out<-list(df=df)
class(out)<-"wlrt_score"
out
}
#' @export
plot.wlrt_score<-function(x,...){
df<-x$df
df$x_pos<-1:nrow(df)
df_cens<-df[df$n_censor>0,]
df_event<-df[df$n_event>0,]
args <- list(ylim=c(min(df_cens$score_cens, df_event$score_event)-0.5,
max(df_cens$score_cens, df_event$score_event)+0.5))
inargs <- list(...)
args[names(inargs)] <- inargs
do.call(plot,c(list(x=df$x_pos,
type="n",xlab="Rank",xaxt="n",ylab="Score"),args))
axis(side=1, labels=df$rank, at=df$x_pos)
points(x=df_cens$x_pos,y=df_cens$score_cens,pch=21,bg="white")
points(x=df_event$x_pos,y=df_event$score_event,pch=21,bg="black")
}
rev(c(0,df_at_risk$n_risk_control[-length(df_at_risk$n_risk_control)]))
rev(c(df_at_risk$n_risk_control[-1],0))
diff(rev(c(df_at_risk$n_risk_control,0)) )
rev(df_at_risk$n_event_control)
diff(rev(c(df_at_risk$n_risk_control,0)) ) - rev(df_at_risk$n_event_control)
df$n_censored_control <- rev(diff(rev(c(df_at_risk$n_risk_control,0)) ) - rev(df_at_risk$n_event_control))
df<-find_weights(data=data,
formula=formula,
wlr=wlr,
t_star = t_star,
s_star = s_star,
rho = rho,
gamma = gamma,
include_cens=TRUE)
df$score_cens<-with(df,-cumsum(w*(n_event/n_risk)))
df$score_event<-with(df,score_cens+w)
#####################################
## include treatment group (DM)
df_at_risk <- find_at_risk(formula=formula,
data=data,
include_cens=TRUE)
df$n_event_control <- df_at_risk$n_event_control
df$n_event_experimental <- df_at_risk$n_event_experimental
df$n_censored_control <- rev(diff(rev(c(df_at_risk$n_risk_control,0)) ) - rev(df_at_risk$n_event_control))
df
df_at_risk$n_censored_control <- rev(diff(rev(c(df_at_risk$n_risk_control,0)) ) - rev(df_at_risk$n_event_control))
df_at_risk
df_at_risk$n_censored_control <- rev(diff(rev(c(df_at_risk$n_risk_control,0))) - rev(df_at_risk$n_event_control))
df_at_risk$n_censored_experimental <- rev(diff(rev(c(df_at_risk$n_risk_experimental,0))) - rev(df_at_risk$n_event_experimental))
df$n_event_control <- df_at_risk$n_event_control
df$n_event_experimental <- df_at_risk$n_event_experimental
df$n_censored_control <- df_at_risk$n_censored_control
df$n_censored_experimental <- df_at_risk$n_censored_experimental
head(df)
head(df)
df[20:30,]
tail(df)
df_full <- NULL
for (i in seq_along(df$t_j)) {
df_full <- rbind(df_full, purrr::map_df(rep(i, df[i,"n_event_experimental"]), function(x) cbind(df[x,], data.frame(group = "experimental", event = 1))))
}
df <- df_full
###############
df
df_full <- NULL
for (i in seq_along(df$t_j)) {
df_full <- rbind(df_full, purrr::map_df(rep(i, df[i,"n_event_experimental"]), function(x) cbind(df[x,], data.frame(group = "experimental", event = 1))))
df_full <- rbind(df_full, purrr::map_df(rep(i, df[i,"n_event_control"]), function(x) cbind(df[x,], data.frame(group = "control", event = 1))))
df_full <- rbind(df_full, purrr::map_df(rep(i, df[i,"n_censored_experimental"]), function(x) cbind(df[x,], data.frame(group = "experimental", event = 0))))
df_full <- rbind(df_full, purrr::map_df(rep(i, df[i,"n_censored_control"]), function(x) cbind(df[x,], data.frame(group = "control", event = 0))))
}
df <- df_full
df
df_full <- NULL
for (i in seq_along(df$t_j)) {
df_full <- rbind(df_full, purrr::map_df(rep(i, df[i,"n_event_experimental"]), function(x) cbind(df[x,], data.frame(group = "experimental"), data.frame(event = 1))))
df_full <- rbind(df_full, purrr::map_df(rep(i, df[i,"n_event_control"]), function(x) cbind(df[x,], data.frame(group = "control"), data.frame(event = 1))))
df_full <- rbind(df_full, purrr::map_df(rep(i, df[i,"n_censored_experimental"]), function(x) cbind(df[x,], data.frame(group = "experimental"), data.frame(event = 0))))
df_full <- rbind(df_full, purrr::map_df(rep(i, df[i,"n_censored_control"]), function(x) cbind(df[x,], data.frame(group = "control"), data.frame(event = 0))))
}
df <- df_full
df
df_full <- NULL
for (i in seq_along(df$t_j)) {
df_full <- rbind(df_full, cbind(purrr::map_df(rep(i, df[i,"n_event_experimental"]), function(x) df[x,]), data.frame(group = "experimental"), data.frame(event = 1)))
df_full <- rbind(df_full, cbind(purrr::map_df(rep(i, df[i,"n_event_control"]), function(x) df[x,]), data.frame(group = "control"), data.frame(event = 1)))
df_full <- rbind(df_full, cbind(purrr::map_df(rep(i, df[i,"n_censored_experimental"]), function(x) df[x,]), data.frame(group = "experimental"), data.frame(event = 0)))
df_full <- rbind(df_full, cbind(purrr::map_df(rep(i, df[i,"n_censored_control"]), function(x) df[x,]), data.frame(group = "control"), data.frame(event = 0)))
}
df <- df_full
df_i <- purrr::map_df(rep(i, df[i,"n_event_experimental"]), function(x) df[x,])
df_i
df<-find_weights(data=data,
formula=formula,
wlr=wlr,
t_star = t_star,
s_star = s_star,
rho = rho,
gamma = gamma,
include_cens=TRUE)
df$score_cens<-with(df,-cumsum(w*(n_event/n_risk)))
df$score_event<-with(df,score_cens+w)
#####################################
## include treatment group (DM)
df_at_risk <- find_at_risk(formula=formula,
data=data,
include_cens=TRUE)
df_at_risk$n_censored_experimental <- rev(diff(rev(c(df_at_risk$n_risk_experimental,0))) - rev(df_at_risk$n_event_experimental))
df_at_risk$n_censored_control <- rev(diff(rev(c(df_at_risk$n_risk_control,0))) - rev(df_at_risk$n_event_control))
df$n_event_control <- df_at_risk$n_event_control
df$n_event_experimental <- df_at_risk$n_event_experimental
df$n_censored_control <- df_at_risk$n_censored_control
df$n_censored_experimental <- df_at_risk$n_censored_experimental
df_i <- purrr::map_df(rep(i, df[i,"n_event_experimental"]), function(x) df[x,])
df_i
i = 2
df_i <- purrr::map_df(rep(i, df[i,"n_event_experimental"]), function(x) df[x,])
df_i
i = 3
df_i <- purrr::map_df(rep(i, df[i,"n_event_experimental"]), function(x) df[x,])
df_i
df_i$group = "experimental"
df_i
df_i_e_e$event <- "1
df_full <- rbind(df_full, cbind(purrr::map_df(rep(i, df[i,"n_event_experimental"]), function(x) df[x,]), data.frame(group = "experimental"), data.frame(event = 1)))
df_full <- rbind(df_full, cbind(purrr::map_df(rep(i, df[i,"n_event_control"]), function(x) df[x,]), data.frame(group = "control"), data.frame(event = 1)))
df_full <- rbind(df_full, cbind(purrr::map_df(rep(i, df[i,"n_censored_experimental"]), function(x) df[x,]), data.frame(group = "experimental"), data.frame(event = 0)))
df_full <- rbind(df_full, cbind(purrr::map_df(rep(i, df[i,"n_censored_control"]), function(x) df[x,]), data.frame(group = "control"), data.frame(event = 0)))
}
df <- df_full
###########################################
df$rank<-paste0("(",nrow(df):1,")")
out<-list(df=df)
class(out)<-"wlrt_score"
out
}
#' @export
plot.wlrt_score<-function(x,...){
df<-x$df
df$x_pos<-1:nrow(df)
df_cens<-df[df$n_censor>0,]
df_event<-df[df$n_event>0,]
args <- list(ylim=c(min(df_cens$score_cens, df_event$score_event)-0.5,
max(df_cens$score_cens, df_event$score_event)+0.5))
inargs <- list(...)
args[names(inargs)] <- inargs
do.call(plot,c(list(x=df$x_pos,
type="n",xlab="Rank",xaxt="n",ylab="Score"),args))
axis(side=1, labels=df$rank, at=df$x_pos)
points(x=df_cens$x_pos,y=df_cens$score_cens,pch=21,bg="white")
points(x=df_event$x_pos,y=df_event$score_event,pch=21,bg="black")
}
df<-find_weights(data=data,
formula=formula,
wlr=wlr,
t_star = t_star,
s_star = s_star,
rho = rho,
gamma = gamma,
include_cens=TRUE)
df$score_cens<-with(df,-cumsum(w*(n_event/n_risk)))
df$score_event<-with(df,score_cens+w)
#####################################
## include treatment group (DM)
df_at_risk <- find_at_risk(formula=formula,
data=data,
include_cens=TRUE)
df_at_risk$n_censored_control <- rev(diff(rev(c(df_at_risk$n_risk_control,0))) - rev(df_at_risk$n_event_control))
df_at_risk$n_censored_experimental <- rev(diff(rev(c(df_at_risk$n_risk_experimental,0))) - rev(df_at_risk$n_event_experimental))
df$n_event_control <- df_at_risk$n_event_control
df$n_event_experimental <- df_at_risk$n_event_experimental
df$n_censored_control <- df_at_risk$n_censored_control
df$n_censored_experimental <- df_at_risk$n_censored_experimental
###########################################
## replicate rows with ties (DM)
df_full <- NULL
df_full <- NULL
for (i in seq_along(df$t_j)) {
df_i_e_e <- purrr::map_df(rep(i, df[i,"n_event_experimental"]), function(x) df[x,])
df_i_e_e$group <- "experimental"
df_i_e_e$event <- 1
df_i_c_e <- purrr::map_df(rep(i, df[i,"n_event_control"]), function(x) df[x,])
df_i_c_e$group <- "control"
df_i_c_e$event <- 1
df_i_e_c <- purrr::map_df(rep(i, df[i,"n_censored_experimental"]), function(x) df[x,])
df_i_e_c$group <- "experimental"
df_i_e_c$event <- 0
df_i_c_c <- purrr::map_df(rep(i, df[i,"n_censored_control"]), function(x) df[x,])
df_i_c_c$group <- "control"
df_i_c_c$event <- 0
df_full <- rbind(df_full, df_i_e_e, df_i_c_e, df_i_e_c, df_i_c_c)
}
df <- df_full
df
head(df)
###########################################
## pick out score (event or censored) (DM)
df$score <- with(df, event * score_event + (1 - event) * score_cens)
head(df)
max_a <- max(df$score)
min_a <- min(df$score)
A = 2 / (max_a - min_a)
B = 1 - A * max_a
df$standardized_score <- df$score * A + B
head(df)
head(df)
tail(df)
find_scores<-function(formula,
data,
wlr,
t_star = NULL,
s_star = NULL,
rho = NULL,
gamma = NULL,
...){
df<-find_weights(data=data,
formula=formula,
wlr=wlr,
t_star = t_star,
s_star = s_star,
rho = rho,
gamma = gamma,
include_cens=TRUE)
df$score_cens<-with(df,-cumsum(w*(n_event/n_risk)))
df$score_event<-with(df,score_cens+w)
#####################################
## include treatment group (DM)
df_at_risk <- find_at_risk(formula=formula,
data=data,
include_cens=TRUE)
df_at_risk$n_censored_control <- rev(diff(rev(c(df_at_risk$n_risk_control,0))) - rev(df_at_risk$n_event_control))
df_at_risk$n_censored_experimental <- rev(diff(rev(c(df_at_risk$n_risk_experimental,0))) - rev(df_at_risk$n_event_experimental))
df$n_event_control <- df_at_risk$n_event_control
df$n_event_experimental <- df_at_risk$n_event_experimental
df$n_censored_control <- df_at_risk$n_censored_control
df$n_censored_experimental <- df_at_risk$n_censored_experimental
###########################################
## replicate rows with ties (DM)
df_full <- NULL
for (i in seq_along(df$t_j)) {
df_i_e_e <- purrr::map_df(rep(i, df[i,"n_event_experimental"]), function(x) df[x,])
df_i_e_e$group <- "experimental"
df_i_e_e$event <- 1
df_i_c_e <- purrr::map_df(rep(i, df[i,"n_event_control"]), function(x) df[x,])
df_i_c_e$group <- "control"
df_i_c_e$event <- 1
df_i_e_c <- purrr::map_df(rep(i, df[i,"n_censored_experimental"]), function(x) df[x,])
df_i_e_c$group <- "experimental"
df_i_e_c$event <- 0
df_i_c_c <- purrr::map_df(rep(i, df[i,"n_censored_control"]), function(x) df[x,])
df_i_c_c$group <- "control"
df_i_c_c$event <- 0
df_full <- rbind(df_full, df_i_e_e, df_i_c_e, df_i_e_c, df_i_c_c)
}
df <- df_full
###########################################
## pick out score (event or censored) (DM)
df$score <- with(df, event * score_event + (1 - event) * score_cens)
## standardize scores to (-1, 1) (DM)
max_a <- max(df$score)
min_a <- min(df$score)
A = 2 / (max_a - min_a)
B = 1 - A * max_a
df$standardized_score <- df$score * A + B
############################################
df$rank<-paste0("(",nrow(df):1,")")
out<-list(df=df)
class(out)<-"wlrt_score"
out
}
#' @export
plot.wlrt_score<-function(x,...){
df<-x$df
df$x_pos<-1:nrow(df)
#df_cens<-df[df$n_censor>0,]
#df_event<-df[df$n_event>0,]
df_experimental_cens<-df[df$group == "experimental" & df$event == 0,]
df_experimental_event<-df[df$group == "experimental" & df$event == 1,]
df_control_cens<-df[df$group == "control" & df$event == 0,]
df_control_event<-df[df$group == "control" & df$event == 1,]
#args <- list(ylim=c(min(df_cens$score_cens, df_event$score_event)-0.5,
#                    max(df_cens$score_cens, df_event$score_event)+0.5))
args <- list(ylim=c(-1,1))
inargs <- list(...)
args[names(inargs)] <- inargs
do.call(plot,c(list(x=df$x_pos,
type="n",xlab="Rank",xaxt="n",ylab="Score"),args))
axis(side=1, labels=df$rank, at=df$x_pos)
points(x=df_experimental_cens$x_pos,y=df_experimental_cens$standardized_score,pch=21,bg="white")
points(x=df_experimental_event$x_pos,y=df_experimental_event$standardized_score,pch=21,bg="black")
points(x=df_control_cens$x_pos,y=df_control_cens$standardized_score,pch=20,bg="white")
points(x=df_control_event$x_pos,y=df_control_event$standardized_score,pch=20,bg="black")
}
###################################
scores_out<-find_scores(data=sim_data,
formula=Surv(event_time,event_status)~group,
wlr="mw",
t_star = 3
)
plot(scores_out)
#' @export
plot.wlrt_score<-function(x,...){
df<-x$df
df$x_pos<-1:nrow(df)
#df_cens<-df[df$n_censor>0,]
#df_event<-df[df$n_event>0,]
df_experimental_cens<-df[df$group == "experimental" & df$event == 0,]
df_experimental_event<-df[df$group == "experimental" & df$event == 1,]
df_control_cens<-df[df$group == "control" & df$event == 0,]
df_control_event<-df[df$group == "control" & df$event == 1,]
#args <- list(ylim=c(min(df_cens$score_cens, df_event$score_event)-0.5,
#                    max(df_cens$score_cens, df_event$score_event)+0.5))
args <- list(ylim=c(-1,1))
inargs <- list(...)
args[names(inargs)] <- inargs
do.call(plot,c(list(x=df$x_pos,
type="n",xlab="Rank",xaxt="n",ylab="Score"),args))
axis(side=1, labels=df$rank, at=df$x_pos)
points(x=df_experimental_cens$x_pos,y=df_experimental_cens$standardized_score,pch=21,bg="white")
points(x=df_experimental_event$x_pos,y=df_experimental_event$standardized_score,pch=21,bg="black")
points(x=df_control_cens$x_pos,y=df_control_cens$standardized_score,pch=21,bg="white", col = 2)
points(x=df_control_event$x_pos,y=df_control_event$standardized_score,pch=21,bg="black", col = 2)
}
plot(scores_out)
#' @export
plot.wlrt_score<-function(x,...){
df<-x$df
df$x_pos<-1:nrow(df)
#df_cens<-df[df$n_censor>0,]
#df_event<-df[df$n_event>0,]
df_experimental_cens<-df[df$group == "experimental" & df$event == 0,]
df_experimental_event<-df[df$group == "experimental" & df$event == 1,]
df_control_cens<-df[df$group == "control" & df$event == 0,]
df_control_event<-df[df$group == "control" & df$event == 1,]
#args <- list(ylim=c(min(df_cens$score_cens, df_event$score_event)-0.5,
#                    max(df_cens$score_cens, df_event$score_event)+0.5))
args <- list(ylim=c(-1,1))
inargs <- list(...)
args[names(inargs)] <- inargs
do.call(plot,c(list(x=df$x_pos,
type="n",xlab="Rank",xaxt="n",ylab="Score"),args))
axis(side=1, labels=df$rank, at=df$x_pos)
points(x=df_experimental_cens$x_pos,y=df_experimental_cens$standardized_score,pch=21,bg="white")
points(x=df_experimental_event$x_pos,y=df_experimental_event$standardized_score,pch=21,bg="black")
points(x=df_control_cens$x_pos,y=df_control_cens$standardized_score,pch=21,bg="white", col = 2)
points(x=df_control_event$x_pos,y=df_control_event$standardized_score,pch=21,bg="red", col = 2)
}
plot(scores_out)
scores_out<-find_scores(data=sim_data_strata,
formula=Surv(event_time,event_status)~group + strata(ecog),
wlr="mw",
t_star = 3
)
scores_out<-find_scores(data=sim_data_strata,
formula=Surv(event_time,event_status)~group + ecog,
wlr="mw",
t_star = 3
)
setwd("~/NPH")
setwd("~/r-package-rct-under-anticipated-delayed-effects/R")
