test_that("example setting s_star", {
expect_snapshot_file(save_file(
wlrt(formula=Surv(event_time,event_status)~group,
data=sim_data,
method="mw",
s_star = 0.5
)), "out_s_star.RDS",cran = TRUE)
})
test_that("example with 1 strata", {
expect_snapshot_file(save_file(
wlrt(formula=Surv(event_time,event_status)~group+strata(ecog),
data=sim_data_strata,
method="mw",
t_star = 4
)), "out_strata.RDS",cran = TRUE)
})
test_that("example with 2 strata", {
expect_snapshot_file(save_file(
wlrt(formula=Surv(event_time,event_status)~group+strata(ecog)+strata(sex),
data=sim_data_strata_2,
method="mw",
t_star = 4
)), "out_strata_2.RDS",cran = TRUE)
})
test_that("only one treatment arm indicator", {
expect_error(wlrt(formula=Surv(event_time,event_status)~group+sex+strata(ecog),
data=sim_data_strata_2,
method="mw",
t_star = 4
),
"Formula must contain only one treatment arm indicator")
})
test_that("Minimum stratum size is 5", {
expect_error(wlrt(formula=Surv(event_time,event_status)~group+strata(ecog),
data=sim_data_strata_small,
method="mw",
t_star = 4
),
"Minimum stratum size is 5")
})
load_all()
document()
rm(list = c("plot.df_score"))
document()
load_all()
covr <- package_coverage(path=".")
covr <- package_coverage(path=".")
covr <- package_coverage(path=".")
covr <- package_coverage(path=".")
sim_data <- sim_events_delay(
event_model=list(
duration_c = 36,
duration_e = c(6,30),
lambda_c = log(2)/9,
lambda_e = c(log(2)/9,log(2)/18)
),
recruitment_model=list(
rec_model="power",
rec_period = 12,
rec_power = 1
),
n_c=50,
n_e=50,
max_cal_t = 36
)
df_scores_mw<-find_scores(formula=Surv(event_time,event_status)~group,
data=sim_data,
method="mw",
t_star = 4
)
df_scores_rmst<-find_scores(formula=Surv(event_time,event_status)~group,
data=sim_data,
method="rmst",
tau = 4
)
df_scores_ms<-find_scores(formula=Surv(event_time,event_status)~group,
data=sim_data,
method="ms",
tau = 4
)
df<-df_scores$df
test_that("should add to zero by definition", {
expect_equal(sum(c(rowSums(df[,grep("n_event_",names(df))])*df$score_event+
rowSums(df[,grep("n_censored_",names(df))])*df$score_censored)), 0)
})
save_png <- function(code) {
path <- tempfile(fileext = ".png")
png(file = path)
on.exit(dev.off())
code
path
}
test_that("plot", {
expect_snapshot_file(save_png(
plot(df_scores)), "plot_wlrt_score.png",cran = TRUE)
})
set.seed(1)
sim_data <- sim_events_delay(
event_model=list(
duration_c = 36,
duration_e = c(6,30),
lambda_c = log(2)/9,
lambda_e = c(log(2)/9,log(2)/18)
),
recruitment_model=list(
rec_model="power",
rec_period = 12,
rec_power = 1
),
n_c=50,
n_e=50,
max_cal_t = 36
)
df_scores_mw<-find_scores(formula=Surv(event_time,event_status)~group,
data=sim_data,
method="mw",
t_star = 4
)
df_scores_rmst<-find_scores(formula=Surv(event_time,event_status)~group,
data=sim_data,
method="rmst",
tau = 4
)
df_scores_ms<-find_scores(formula=Surv(event_time,event_status)~group,
data=sim_data,
method="ms",
tau = 4
)
df<-df_scores$df
df_scores_mw
covr <- package_coverage(path=".")
report(covr)
df_scores<-get(paste0("df_scores_",type))
type+"mw"
type="mw"
df_scores<-get(paste0("df_scores_",type))
df_scores
df<-df_scores$df
test_that("should add to zero by definition", {
expect_equal(sum(c(rowSums(df[,grep("n_event_",names(df))])*df$score_event+
rowSums(df[,grep("n_censored_",names(df))])*df$score_censored)), 0)
})
for (type in c("mw","rmst","ms")){
df_scores<-get(paste0("df_scores_",type))
df<-df_scores$df
test_that("should add to zero by definition", {
expect_equal(sum(c(rowSums(df[,grep("n_event_",names(df))])*df$score_event+
rowSums(df[,grep("n_censored_",names(df))])*df$score_censored)), 0)
})
test_that("plot", {
expect_snapshot_file(save_png(
plot(df_scores)), paste0("plot_",type,".png"),cran = TRUE)
})
}
covr <- package_coverage(path=".")
report(covr)
check()
ta <- sim_events_delay(
event_model=list(
duration_c = 36,
duration_e = c(12 ,24),
lambda_c = log(2)/9,
lambda_e = c(log(2)/9,log(2)/18)),
recruitment_model=list(
rec_model="power",
rec_period=12,
rec_power=1),
n_c=5,
n_e=5,
max_cal_t = 36
)
sim_data
find_at_risk(formula=Surv(event_time,event_status)~group,
data=sim_data,
include_cens=FALSE)
find_weights(formula=Surv(event_time,event_status)~group,
data=sim_data,
method="lr",
include_cens = FALSE)
find_weights(formula=Surv(event_time,event_status)~group,
data=sim_data,
method="mw",
s_star = 0.5,
include_cens = FALSE)
wlrt(formula=Surv(event_time,event_status)~group,
data=sim_data,
method="mw",
s_star = 0.5)
df_scores_mw<-find_scores(formula=Surv(event_time,event_status)~group,
data=sim_data,
method="mw",
s_star = 0.5)
plot(df_scores_mw)
df_scores_fh<-find_scores(formula=Surv(event_time,event_status)~group,
data=sim_data,
method="fh",
rho = 0,
gamma=1)
plot(df_scores_fh)
df_scores_fh
debug()
debug(plot)
plot(df_scores_fh)
plot(df_scores_fh)
ggplot2::ggplot(df, ggplot2::aes_string(x="t_j", y="standardized_score",col="event_group"))
ggplot2::ggplot(df, ggplot2::aes_string(x="t_j", y="standardized_score",col="event_group")) + ggplot2::geom_point(alpha=0.3) +
ggplot2::ylim(-1.1,1.1)+labels
df
ggplot2::ggplot(df, ggplot2::aes_string(x="t_j", y="standardized_score",col="group")) + ggplot2::geom_point(alpha=0.3) +
ggplot2::ylim(-1.1,1.1)+labels
ggplot2::ggplot(df, ggplot2::aes_string(x="t_j", y="standardized_score",col="group")) + ggplot2::geom_point(alpha=0.3) +
ggplot2::ylim(-1.1,1.1)+labels+
ggplot2::geom_hline(ggplot2::aes_string(yintercept="intercept",col="event_group"),linetype="dashed",data=means)
ggplot2::ggplot(df, ggplot2::aes_string(x="t_j", y="standardized_score",col="group")) + ggplot2::geom_point(alpha=0.3) +
ggplot2::ylim(-1.1,1.1)+labels+
ggplot2::geom_hline(ggplot2::aes_string(yintercept="intercept",col="group"),linetype="dashed",data=means)
means
ggplot2::ggplot(df, ggplot2::aes_string(x="t_j", y="standardized_score",col="group")) + ggplot2::geom_point(alpha=0.3) +
ggplot2::ylim(-1.1,1.1)+labels+
ggplot2::geom_hline(ggplot2::aes_string(yintercept="intercept",col="group"),linetype="dashed",data=means)
df
ggplot2::ggplot(df, ggplot2::aes_string(x="t_j", y="standardized_score",col="group"))
ggplot2::ggplot(df, ggplot2::aes_string(x="t_j", y="standardized_score",col="group")) + ggplot2::geom_point(alpha=event) +
ggplot2::ylim(-1.1,1.1)+labels+
ggplot2::geom_hline(ggplot2::aes_string(yintercept="intercept",col="group"),linetype="dashed",data=means)
ggplot2::ggplot(df, ggplot2::aes_string(x="t_j", y="standardized_score",col="group")) + ggplot2::geom_point(alpha=event)
df
ggplot2::ggplot(df, ggplot2::aes_string(x="t_j", y="standardized_score",col="event_group")) + ggplot2::geom_point(alpha=0.3) +
ggplot2::ylim(-1.1,1.1)+labels+
ggplot2::geom_hline(ggplot2::aes_string(yintercept="intercept",col="event_group"),linetype="dashed",data=means)
ggplot2::ggplot(df, ggplot2::aes_string(x="t_j", y="standardized_score",col="event_group")) + ggplot2::geom_point(alpha=0.3) +
ggplot2::ylim(-1.1,1.1)+labels
df<-x[["df"]]
df[["group"]]<-as.factor(df[["group"]])
gl1=levels(df[["group"]])[1]
gl2=levels(df[["group"]])[2]
df[["event"]]<-factor(df[["event"]],levels=c(1,0))
levels(df[["event"]])<-c( "event","cenored")
df[["group"]]<-factor(df[["group"]],levels=c(gl1,gl2))
df[["event_group"]]<-paste(df[["event"]],df[["group"]],sep=", ")
args <- list(col="",x="Time",y="Score")
inargs <- list(...)
args[names(inargs)] <- inargs
labels<-do.call(ggplot2::labs,args)
means<-data.frame(intercept=c(mean(df[df[["group"]]==gl1,"standardized_score"]),mean(df[df[["group"]]==gl2,"standardized_score"])),
group=c(gl1,gl2))
ggplot2::ggplot(df, ggplot2::aes_string(x="t_j", y="standardized_score",col="event_group")) + ggplot2::geom_point(alpha=0.3) +
ggplot2::ylim(-1.1,1.1)+labels
ggplot2::ggplot(df, ggplot2::aes_string(x="t_j", y="standardized_score",col="event_group")) + ggplot2::geom_point(alpha=0.3) +
ggplot2::ylim(-1.1,1.1)+labels
df
load_all()
document()
sim_data <- sim_events_delay(
event_model=list(
duration_c = 36,
duration_e = c(12 ,24),
lambda_c = log(2)/9,
lambda_e = c(log(2)/9,log(2)/18)),
recruitment_model=list(
rec_model="power",
rec_period=12,
rec_power=1),
n_c=5,
n_e=5,
max_cal_t = 36
)
find_at_risk(formula=Surv(event_time,event_status)~group,
data=sim_data,
include_cens=FALSE)
find_at_risk(formula=Surv(event_time,event_status)~group,
data=sim_data,
include_cens=FALSE)
find_weights(formula=Surv(event_time,event_status)~group,
data=sim_data,
method="fh",
rho = 0,
gamma= 1,
include_cens = FALSE)
find_weights(formula=Surv(event_time,event_status)~group,
data=sim_data,
method="mw",
s_star = 0.5,
include_cens = FALSE)
wlrt(formula=Surv(event_time,event_status)~group,
data=sim_data,
method="mw",
s_star = 0.5)
df_scores_mw<-find_scores(formula=Surv(event_time,event_status)~group,
data=sim_data,
method="mw",
s_star = 0.5)
plot(df_scores_mw)
undebug(plot)
plot(df_scores_mw)
df_scores_fh<-find_scores(formula=Surv(event_time,event_status)~group,
data=sim_data,
method="fh",
rho = 0,
gamma=1)
plot(df_scores_fh)
check()
load_all()
document()
check()
document()
check()
document()
check()
#' sim_data <- sim_events_delay(
#'   event_model=list(
#'     duration_c = 36,
#'     duration_e = c(6,30),
#'     lambda_c = log(2)/9,
#'     lambda_e = c(log(2)/9,log(2)/18)
#'   ),
#'   recruitment_model=list(
#'     rec_model="power",
#'     rec_period = 12,
#'     rec_power = 1
#'   ),
#'   n_c=50,
#'   n_e=50,
#'   max_cal_t = 36#'
#' )
document()
check()
devtools::check_win_release()
ggplot2::ggplot(df, ggplot2::aes_string(x="t_j", y="standardized_score",col="event_group")) + ggplot2::geom_point(alpha=0.3) +
ggplot2::ylim(-1.1,1.1)+labels
build_site()
sim_data <- sim_events_delay(
event_model=list(
duration_c = 36,
duration_e = c(6,30),
lambda_c = log(2)/9,
lambda_e = c(log(2)/9,log(2)/18)
),
recruitment_model=list(
rec_model="power",
rec_period = 12,
rec_power = 1
),
n_c=50,
n_e=50,
max_cal_t = 36
)
load_all(0)
load_all()
document()
sim_data <- sim_events_delay(
event_model=list(
duration_c = 36,
duration_e = c(6,30),
lambda_c = log(2)/9,
lambda_e = c(log(2)/9,log(2)/18)
),
recruitment_model=list(
rec_model="power",
rec_period = 12,
rec_power = 1
),
n_c=50,
n_e=50,
max_cal_t = 36
)
sim_data
document()
build_site()
build_site()
document()
build_site()
document()
build_site()
document()
build_site()
document()
build_site()
vignette("weighted_log_rank_tests", package="wlrt")
vignette("weighted_log_rank_tests", package="wlrt")
document()
build_site()
sim_data <- sim_events_delay(
event_model=list(
duration_c = 36,
duration_e = c(6,30),
lambda_c = log(2)/9,
lambda_e = c(log(2)/9,log(2)/18)
),
recruitment_model=list(
rec_model="power",
rec_period = 12,
rec_power = 1
),
n_c=50,
n_e=50,
max_cal_t = 36
)
df_scores<-find_scores(formula=Surv(event_time,event_status)~group,
data=sim_data,
method="mw",
t_star = 4
)
df_scores
sim_data
load_all()
load_all()
document()
df_score
?find_scores
sim_data <- sim_events_delay(
event_model=list(
duration_c = 36,
duration_e = c(6,30),
lambda_c = log(2)/9,
lambda_e = c(log(2)/9,log(2)/18)
),
recruitment_model=list(
rec_model="power",
rec_period = 12,
rec_power = 1
),
n_c=50,
n_e=50,
max_cal_t = 36
)
df_scores<-find_scores(formula=Surv(event_time,event_status)~group,
data=sim_data,
method="mw",
t_star = 4
)
x=df_scores
df<-x[["df"]]
df[["group"]]<-as.factor(df[["group"]])
gl1=levels(df[["group"]])[1]
gl2=levels(df[["group"]])[2]
df[["event"]]<-factor(df[["event"]],levels=c(1,0))
levels(df[["event"]])<-c( "event","censored")
df[["group"]]<-factor(df[["group"]],levels=c(gl1,gl2))
df
df[["group"]]
df[["event"]]
df[["event_group"]]<-paste(df[["group"]],df[["event"]],sep=", ")
df
df[["event_group_col"]]<-df[["event_group"]]
paste(gl1,"event",sep=", ")
df[["event_group_col"]]==paste(gl1,"event",sep=", ")
df[["event_group_col"]][df[["event_group_col"]]==paste(gl1,"event",sep=", ")]
df[["event_group_col"]][df[["event_group"]]==paste(gl1,"event",sep=", ")]<-"F8766D"
df[["event_group_col"]][df[["event_group"]]==paste(gl1,"censored",sep=", ")]<-"lightsalmon"
df[["event_group_col"]][df[["event_group"]]==paste(gl2,"event",sep=", ")]<-"00BFC4"
df[["event_group_col"]][df[["event_group"]]==paste(gl2,"censored",sep=", ")]<-"darkslategray2"
df
ggplot2::ggplot(df, ggplot2::aes_string(x="t_j", y="standardized_score",col="event_group")) + ggplot2::geom_point(alpha=0.3) +
ggplot2::ylim(-1.1,1.1)+labels
ggplot2::ggplot(df, ggplot2::aes_string(x="t_j", y="standardized_score",col="event_group_col")) + ggplot2::geom_point(alpha=0.3) +
ggplot2::ylim(-1.1,1.1)+labels
ggplot2::ggplot(df, ggplot2::aes_string(x="t_j", y="standardized_score",col="event_group")) + ggplot2::geom_point(alpha=0.3) +
ggplot2::ylim(-1.1,1.1)+labels+ scale_fill_manual(values = c("F8766D", "lightsalmon","00BFC4","darkslategray2"))
ggplot2::ggplot(df, ggplot2::aes_string(x="t_j", y="standardized_score",col="event_group")) + ggplot2::geom_point(alpha=0.3) +
ggplot2::ylim(-1.1,1.1)+labels+ ggplot2::scale_fill_manual(values = c("F8766D", "lightsalmon","00BFC4","darkslategray2"))
ggplot2::ggplot(df, ggplot2::aes_string(x="t_j", y="standardized_score",col="event_group")) + ggplot2::geom_point(alpha=0.3) +
ggplot2::ylim(-1.1,1.1)+labels
ggplot2::ggplot(df, ggplot2::aes_string(x="t_j", y="standardized_score",col="event_group")) + ggplot2::geom_point(alpha=0.3) +
ggplot2::ylim(-1.1,1.1)+labels+ ggplot2::scale_fill_manual(values = c("F8766D", "lightsalmon","00BFC4","darkslategray2"))
ggplot2::ggplot(df, ggplot2::aes_string(x="t_j", y="standardized_score",col="event_group")) + ggplot2::geom_point(alpha=0.3) +
ggplot2::ylim(-1.1,1.1)+labels+ ggplot2::scale_color_manual(values = c("F8766D", "lightsalmon","00BFC4","darkslategray2"))
ggplot2::ggplot(df, ggplot2::aes_string(x="t_j", y="standardized_score",col="event_group")) + ggplot2::geom_point(alpha=0.3) +
ggplot2::ylim(-1.1,1.1)+labels+ ggplot2::scale_color_manual(values = c("#F8766D", "lightsalmon","#00BFC4","darkslategray2"))
ggplot2::ggplot(df, ggplot2::aes_string(x="t_j", y="standardized_score",col="event_group")) + ggplot2::geom_point() +
ggplot2::ylim(-1.1,1.1)+labels+ ggplot2::scale_color_manual(values = c("#F8766D", "lightsalmon","#00BFC4","darkslategray2"))
paste(df[["group"]],df[["event"]],sep=", ")
gl1
df[["event_group"]]<-paste(df[["group"]],df[["event"]],sep=", ")
paste(df[["group"]],df[["event"]],sep=", ")
levels(df[["event_group"]])
df[["event_group"]]
df[["event_group"]]<-as.factor(paste(df[["group"]],df[["event"]],sep=", "),c(paste0(gl1,"event"),paste0(gl1,"control"))
args <- list(col="",x="Time",y="Score")
inargs <- list(...)
args[names(inargs)] <- inargs
labels<-do.call(ggplot2::labs,args)
ggplot2::ggplot(df, ggplot2::aes_string(x="t_j", y="standardized_score",col="event_group")) + ggplot2::geom_point() +
ggplot2::ylim(-1.1,1.1)+labels+ ggplot2::scale_color_manual(values = c("#F8766D", "lightsalmon","#00BFC4","darkslategray2"))
}
df[["event_group"]]<-as.factor(paste(df[["group"]],df[["event"]],sep=", "),c(paste0(gl1,"event"),paste0(gl1,"control")))
df[["event_group"]]
df[["event_group"]]<-factor(paste(df[["group"]],df[["event"]],sep=", "),c(paste0(gl1,"event"),paste0(gl1,"control")))
df[["event_group"]]
paste0(gl1,"event")
paste0(gl1,"control")
paste(c(gl1,"event"),sep=", ")
paste(gl1,"event",sep=", ")
paste(gl1,"control",sep=", ")
paste(gl1,"event",sep=", ")
df[["event_group"]]<-factor(paste(df[["group"]],df[["event"]],sep=", "),levels=c(paste(gl1,"event",sep=", "),paste(gl2,"censoring",sep=", ")))
df[["event_group"]]
df[["event_group"]]<-factor(paste(df[["group"]],df[["event"]],sep=", "),levels=c(paste(gl1,"event",sep=", "),paste(gl2,"censored",sep=", ")))
df[["event_group"]]
gl2
gl1
df
paste(gl1,"event",sep=", ")
factor(paste(df[["group"]],df[["event"]],sep=", "),levels=c(paste(gl1,"event",sep=", "),paste(gl2,"event",sep=", "),paste(gl1,"censored",sep=", "),paste(gl2,"censored",sep=", ")))
df[["event_group"]]<-factor(paste(df[["group"]],df[["event"]],sep=", "),levels=c(paste(gl1,"event",sep=", "),paste(gl2,"event",sep=", "),paste(gl1,"censored",sep=", "),paste(gl2,"censored",sep=", ")))
args <- list(col="",x="Time",y="Score")
ggplot2::ggplot(df, ggplot2::aes_string(x="t_j", y="standardized_score",col="event_group")) + ggplot2::geom_point() +
ggplot2::ylim(-1.1,1.1)+labels+ ggplot2::scale_color_manual(values = c("#F8766D", "#00BFC4", "lightsalmon", "darkslategray2"))
load_all()
document()
build_site()
build_site()
