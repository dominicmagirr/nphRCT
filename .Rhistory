wlr="mw",
t_star = 6
)
formula
formula=Surv(event_time,event_status)~group
Surv <- survival::Surv
formula
formula_km <- update(formula, ~ 1)
formula_km
remove(list=ls())
load_all()
formula=Surv(event_time,event_status)~group
formula_km <- update(formula, ~ 1)
formula_km
formula_km
formula_km
formula_km
formula_km
formula_km
formula_km
survival::survfit(formula_km,
data = data,
timefix = FALSE)
data
data
=sim_data
data=sim_data
sim_data <- sim_events_delay(
n_c = 5,
n_e = 5,
delay_e = 6,
lambda_c = log(2)/9,
lambda_e_1 = log(2)/9,
lambda_e_2 = log(2)/18,
rec_period = 12,
rec_power = 1,
max_
sim_data <- sim_events_delay(
n_c = 5,
n_e = 5,
delay_e = 6,
lambda_c = log(2)/9,
lambda_e_1 = log(2)/9,
lambda_e_2 = log(2)/18,
rec_period = 12,
rec_power = 1,
max_cal_t = 36
)
data=sim_data
survival::survfit(formula_km,
data = data,
timefix = FALSE)
formula_km
?survival::survfit
?wlrt
sim_data <- sim_events_delay(
n_c = 5,
n_e = 5,
delay_e = 6,
lambda_c = log(2)/9,
lambda_e_1 = log(2)/9,
lambda_e_2 = log(2)/18,
rec_period = 12,
rec_power = 1,
max_cal_t = 36
)
wlrt_out<-wlrt(data=sim_data,
formula=Surv(event_time,event_status)~group,
wlr="mw",
t_star = 6
)
formula_km
eval(formula_km,data)
Y <- eval(formula[[2]], data) ##formula[[2]] takes lhs
formula[[2]]
#Checks
Surv<-survival::Surv
formula[[2]]
Y <- eval(formula[[2]], data) ##formula[[2]] takes lhs
Y
Y
km_fit <- survival::survfit(Y,timefix = FALSE)
km_fit <- survival::survfit(formula_km,Y,timefix = FALSE)
formula_km
class(formula_km)
formula_km
km_fit <- survival::survfit(get(formula_km),
data = data,
timefix = FALSE)
get(formula_km)
eval(formula_km)
km_fit <- survival::survfit(eval(formula_km),
data = data,
timefix = FALSE)
load_all()
scores_out<-find_scores(data=sim_data,
formula=Surv(event_time,event_status)~group,
wlr="mw",
t_star = 6
)
plot(scores_out)
load_all()
scores_out<-find_scores(data=sim_data,
formula=Surv(event_time,event_status)~group,
wlr="mw",
t_star = 6
)
plot(scores_out)
?wlrt
wlrt_out<-wlrt(data=sim_data,
formula=Surv(event_time,event_status)~group,
wlr="mw",
t_star = 6
)
remove(list=ls())
load_all()
wlrt_out<-wlrt(data=sim_data,
formula=Surv(event_time,event_status)~group,
wlr="mw",
t_star = 6
)
debug(wlrt)
wlrt_out<-wlrt(data=sim_data,
formula=Surv(event_time,event_status)~group,
wlr="mw",
t_star = 6
)
wlrt_out<-wlrt(data=sim_data,
formula=Surv(event_time,event_status)~group,
wlr="mw",
t_star = 6
)
data
sim_data <- sim_events_delay(
n_c = 5,
n_e = 5,
delay_e = 6,
lambda_c = log(2)/9,
lambda_e_1 = log(2)/9,
lambda_e_2 = log(2)/18,
rec_period = 12,
rec_power = 1,
max_cal_t = 36
)
wlrt_out<-wlrt(data=sim_data,
formula=Surv(event_time,event_status)~group,
wlr="mw",
t_star = 6
)
wlrt_out<-wlrt(data=sim_data,
formula=Surv(event_time,event_status)~group,
wlr="mw",
t_star = 6
)
load_all()
wlrt_out<-wlrt(data=sim_data,
formula=Surv(event_time,event_status)~group,
wlr="mw",
t_star = 6
)
debug(wlrt)
wlrt_out<-wlrt(data=sim_data,
formula=Surv(event_time,event_status)~group,
wlr="mw",
t_star = 6
)
debug(find_weights)
wlrt_out<-wlrt(data=sim_data,
formula=Surv(event_time,event_status)~group,
wlr="mw",
t_star = 6
)
survival::survfit(eval(formula_km),
data = data,
timefix = FALSE)
eval(formula_km)
wlrt_out<-wlrt(data=sim_data,
formula=Surv(event_time,event_status)~group,
wlr="mw",
t_star = 6
)
formula_km
formula_km <- update(formula, ~ 1)
formula_km
Surv <- survival::Surv
Y <- eval(formula[[2]], data) ##formula[[2]] takes lhs
Surv
wlrt_out<-wlrt(data=sim_data,
formula=Surv(event_time,event_status)~group,
wlr="mw",
t_star = 6
)
environment(Surv)
environment()
Surv
eval(formula_km)
formula_km <- update(formula, ~ 1)
formula_km
formula_km<-survival::Surv(event_time, event_status) ~ 1
km_fit <- survival::survfit(eval(formula_km),
data = data,
timefix = FALSE)
km_fit <- survival::survfit(eval(formula_km),
data = data,
timefix = FALSE)
formula[[2]]
formula
wlrt_out<-wlrt(data=sim_data,
formula=Surv(event_time,event_status)~group,
wlr="mw",
t_star = 6
)
survival::survfit(eval(formula_km),
data = data,
timefix = FALSE)
remove(list-ls())
remove(list=ls())
load_all()
wlrt_out<-wlrt(data=sim_data,
formula=Surv(event_time,event_status)~group,
wlr="mw",
t_star = 6
)
sim_data <- sim_events_delay(
n_c = 5,
n_e = 5,
delay_e = 6,
lambda_c = log(2)/9,
lambda_e_1 = log(2)/9,
lambda_e_2 = log(2)/18,
rec_period = 12,
rec_power = 1,
max_cal_t = 36
)
wlrt_out<-wlrt(data=sim_data,
formula=Surv(event_time,event_status)~group,
wlr="mw",
t_star = 6
)
find_weights<-function(data,
formula,
wlr,
t_star = NULL,
s_star = NULL,
rho = NULL,
gamma = NULL,
include_nonevents=TRUE){
#Find weights
wlr <- match.arg(wlr, c("lr", "fh", "mw"))
Surv <- survival::Surv
Y <- eval(formula[[2]], data) ##formula[[2]] takes lhs
formula_km <- update(formula, ~ 1)
km_fit <- survival::survfit(eval(formula_km),
data = data,
timefix = FALSE)
if(include_nonevents==TRUE){
t_j <- km_fit$time
S_hat <- km_fit$surv
S_hat_minus <- c(1, S_hat[1:(length(S_hat) - 1)])
}else{
t_j <- km_fit$time[km_fit$n.event > 0]
S_hat <- km_fit$surv[km_fit$n.event > 0]
S_hat_minus <- c(1, S_hat[1:(length(S_hat) - 1)])
}
if (wlr == "lr") {
w <- rep(1, length(S_hat_minus))
}
if (wlr == "fh") {
if (is.null(rho) ||
is.null(gamma))
stop("Must specify rho and gamma")
if (rho < 0 ||
gamma < 0)
stop("rho and gamma must be non-negative")
w <- S_hat_minus ^ rho * (1 - S_hat_minus) ^ gamma
}
if (wlr == "mw") {
if (is.null(t_star) && is.null(s_star)) stop("must specify either t_star or s_star")
if (!is.null(t_star) && !is.null(s_star)) stop("must specify either t_star or s_star (not both)")
if (!is.null(t_star)){
if (any(t_j < t_star)) {
w <- pmin(1 / S_hat_minus,
1 / S_hat[max(which(t_j < t_star))])
}
else {
w <- rep(1, length(S_hat_minus))
}
}
else {
w <- pmin(1 / S_hat_minus,
1 / s_star)
}
}
out<-list(w=w,km_fit=km_fit)
out
}
wlrt_out<-wlrt(data=sim_data,
formula=Surv(event_time,event_status)~group,
wlr="mw",
t_star = 6
)
wlrt <- function(data,
formula,
wlr,
t_star = NULL,
s_star = NULL,
rho = NULL,
gamma = NULL) {
#Checks
Surv<-survival::Surv
Y <- eval(formula[[2]], data) ##formula[[2]] takes lhs
if (!inherits(Y, "Surv")){
stop("formula has an incorrect format")
}
if (!attr(Y, "type") == "right") {
stop("Censoring type should be right censoring")
} #ensures of form Surv(time, status)
formula_vars <- all.vars(formula)
time_col <- formula_vars[1]
status_col <- formula_vars[2]
Terms <- terms(formula,"strata")
terms_vars <- labels(Terms)
strata_vars <- attr(Terms,"specials")$strata
if (is.null(strata_vars)) {#no strata
if (length(terms_vars)!=1) {
stop("One treatment arm indicator must be specified in formula")
}
if (any(is.na(data[, formula_vars]))) {
stop("NA's in data set. wlrt doesn't have a default for missing data.")
}
w<-find_weights(data=data,
formula=formula,
wlr=wlr,
t_star = t_star,
s_star = s_star,
rho = rho,
gamma = gamma,
include_nonevents=FALSE)$w
#Find at-risk tables
group_col<-terms_vars
df_events<-data.frame(time=data[[time_col]],
status=data[[status_col]],
group=data[[group_col]]
)
groups <- sort(unique(df_events$group))
if (length(groups)!=2){stop("Only 2 treatment groups allowed")}
df_events[,paste0("nrisk_", groups)]<-sapply(groups,function(i){+(df_events$group == i)})
df_events[,paste0("nevent_", groups)]<-sapply(groups,function(i){df_events$status * df_events[[paste0("nrisk_", i)]]})
df_events[["group"]] <- df_events[["status"]] <-NULL
df_events <- aggregate(. ~ time, df_events, FUN = sum)
df_events[,paste0("nrisk_", groups)]<-sapply(groups,function(i){rev(cumsum(rev(df_events[,paste0("nrisk_", i)])))})
nevent<-rowSums(df_events[,paste0("nevent_", groups)])
df_events<-df_events[nevent>0,]
neventg <- as.matrix(df_events[, paste0("nevent_", groups)])
nevent <- rowSums(neventg)
nriskg <- as.matrix(df_events[, paste0("nrisk_", groups)])
nrisk <- rowSums(nriskg)
# test statistics
observed <- w %*% neventg
expected <- w %*% (nriskg * (nevent / nrisk))
u <- (observed - expected)[, 2]
v_u <-w ^ 2 * (apply(nriskg, 1, prod) * nevent * (nrisk - nevent)) / (nrisk ^ 2 * (nrisk - 1))
v_u[nrisk == 1] <- 0
v_u<-sum(v_u)
z = u / sqrt(v_u)
out <- list(
u = as.vector((observed - expected)[, 2]),
v_u = as.vector(v_u),
z = as.vector(z),
o_minus_e_trt = groups[2]
)
out
}else{#strata
}
}
wlrt_out<-wlrt(data=sim_data,
formula=Surv(event_time,event_status)~group,
wlr="mw",
t_star = 6
)
debug(wlrt)
wlrt_out<-wlrt(data=sim_data,
formula=Surv(event_time,event_status)~group,
wlr="mw",
t_star = 6
)
wlrt_out<-wlrt(data=sim_data,
formula=Surv(event_time,event_status)~group,
wlr="mw",
t_star = 6
)
debug(find_weights)
formula_km
survival::survfit
formula_km
wlrt_out<-wlrt(data=sim_data,
formula=Surv(event_time,event_status)~group,
wlr="mw",
t_star = 6
)
Surv
eval(formula_km)
survival::survfit(eval(formula_km),
data = data,
timefix = FALSE)
formula_km
survival::survfit(survival::Surv(event_time, event_status) ~ 1,
data = data,
timefix = FALSE)
survival::survfit(Surv(event_time, event_status) ~ 1,
data = data,
timefix = FALSE)
survival::survfit(eval(formula_km),
data = data,
timefix = FALSE)
survival::survfit(formula_km,
data = data,
timefix = FALSE)
survival::survfit(as.formula(formula_km),
data = data,
timefix = FALSE)
survival::survfit(eval(as.formula(formula_km)),
data = data,
timefix = FALSE)
survival::survfit(formula_km[[2]]~1,
data = data,
timefix = FALSE)
formula_km[[2]]
remove(list-ls())
remove(list=ls())
load_all()
sim_data <- sim_events_delay(
n_c = 5,
n_e = 5,
delay_e = 6,
lambda_c = log(2)/9,
lambda_e_1 = log(2)/9,
lambda_e_2 = log(2)/18,
rec_period = 12,
rec_power = 1,
max_cal_t = 36
)
scores_out<-find_scores(data=sim_data,
formula=Surv(event_time,event_status)~group,
wlr="mw",
t_star = 6
)
scores_out
plot(scores_out)
sim_data
n_event/n_risk
scores_out$scores_df
w
sum(scores_out$scores_df$score_event)
sum(scores_out$scores_df$score_event*scores_out$scores_df$n_event)
?sim_events_delay
library(wlrt)
set.seed(1)
sim_data <- sim_events_delay(
n_c = 5,
n_e = 5,
delay_e = 6,
lambda_c = log(2)/9,
lambda_e_1 = log(2)/9,
lambda_e_2 = log(2)/18,
rec_period = 12,
rec_power = 1,
max_cal_t = 36
)
sim_data
?wlrt
document()
?wlrt
wlrt(data=sim_data,
formula=Surv(event_time,event_status)~group,
wlr="mw",
t_star = 6
)
document()
vignette("weighted_log_rank_tests")
vignette()
vignette(package::wlrt)
vignette(wlrt)
vignette(package=wlrt)
vignette(package="wlrt")
build_vignettes()
vignette("weighted_log_rank_tests")
vignette(package="wlrt")
vignette("weighted_log_rank_tests")
vignette(package="wlrt")
vignette(package="wlrt","weighted_log_rank_tests")
build_vignettes()
vignette(package="wlrt","weighted_log_rank_tests")
build_vignettes()
build_vignettes()
vignette(package="wlrt","weighted_log_rank_tests")
build_vignettes()
vignette(package="wlrt","weighted_log_rank_tests")
build_vignettes()
vignette(package="wlrt","weighted_log_rank_tests")
build_vignettes()
vignette(package="wlrt","weighted_log_rank_tests")
build_vignettes()
vignette(package="wlrt","weighted_log_rank_tests")
build_vignettes()
vignette(package="wlrt","weighted_log_rank_tests")
build_vignettes()
vignette(package="wlrt","weighted_log_rank_tests")
build_vignettes()
vignette(package="wlrt","weighted_log_rank_tests")
build_vignettes()
vignette(package="wlrt","weighted_log_rank_tests")
